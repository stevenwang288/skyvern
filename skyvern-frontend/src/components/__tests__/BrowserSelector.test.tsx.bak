// 5.2 ÂàõÂª∫ÂâçÁ´ØÁªÑ‰ª∂ÊµãËØï
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { BrowserSelector } from '../BrowserSelector';
import { useForm, FormProvider } from 'react-hook-form';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserType } from '../../api/browser-types';
import { vi, describe, test, expect, beforeEach } from 'vitest';

// Mock API
vi.mock('../../api/browser-api', () => ({
  getAdsPowerStatus: vi.fn(),
  validateChromePath: vi.fn()
}));

// Mock UIÁªÑ‰ª∂
vi.mock('../ui/select', () => ({
  Select: ({ children, value, onValueChange }: any) => (
    <select value={value} onChange={(e) => onValueChange(e.target.value)} data-testid="browser-type-select">
      {children}
    </select>
  ),
  SelectContent: ({ children }: any) => <>{children}</>,
  SelectItem: ({ children, value }: any) => <option value={value}>{children}</option>,
  SelectTrigger: ({ children }: any) => <>{children}</>,
  SelectValue: ({ placeholder }: any) => <span>{placeholder || 'Select'}</span>
}));

vi.mock('../ui/input', () => ({
  Input: (props: any) => <input {...props} data-testid="chrome-path-input" />
}));

vi.mock('../ui/button', () => ({
  Button: ({ children, onClick, disabled }: any) => (
    <button onClick={onClick} disabled={disabled} data-testid="test-button">
      {children}
    </button>
  )
}));

vi.mock('../ui/alert', () => ({
  Alert: ({ children, className }: any) => <div className={className}>{children}</div>,
  AlertDescription: ({ children, className }: any) => <div className={className}>{children}</div>
}));

vi.mock('../ui/form', () => ({
  FormField: ({ render }: any) => render({ field: { value: '', onChange: vi.fn() } }),
  FormItem: ({ children }: any) => <div>{children}</div>,
  FormLabel: ({ children }: any) => <label>{children}</label>,
  FormControl: ({ children }: any) => <div>{children}</div>,
  FormMessage: () => null,
  FormDescription: ({ children }: any) => <div className="text-sm text-gray-600">{children}</div>
}));

// MockÂõæÊ†á
vi.mock('lucide-react', () => ({
  RefreshCw: () => <span>üîÑ</span>,
  ExternalLink: () => <span>üîó</span>,
  CheckCircle: () => <span>‚úÖ</span>,
  XCircle: () => <span>‚ùå</span>,
  Chrome: () => <span>üåê</span>,
  Shield: () => <span>üõ°Ô∏è</span>,
  Zap: () => <span>‚ö°</span>
}));

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false }
    }
  });

  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

const TestFormWrapper = ({ children }: { children: React.ReactNode }) => {
  const methods = useForm({
    defaultValues: {
      browser_config: {
        type: BrowserType.SkyvernDefault
      }
    }
  });

  return (
    <FormProvider {...methods}>
      {children}
    </FormProvider>
  );
};

describe('BrowserSelector Component', () => {
  const { getAdsPowerStatus, validateChromePath } = require('../../api/browser-api');

  beforeEach(() => {
    vi.clearAllMocks();
  });

  test('renders browser type selector with all options', () => {
    render(
      <TestFormWrapper>
        <BrowserSelector control={useForm().control} />
      </TestFormWrapper>,
      { wrapper: createWrapper() }
    );

    const select = screen.getByTestId('browser-type-select');
    expect(select).toBeInTheDocument();

    // Check if all browser types are available
    expect(screen.getByText('ü§ñ SkyvernÈªòËÆ§ÊµèËßàÂô®')).toBeInTheDocument();
    expect(screen.getByText('üåê Êú¨Âú∞Ëá™ÂÆö‰πâChrome')).toBeInTheDocument();
    expect(screen.getByText('üõ°Ô∏è AdsPowerÈò≤ÂÖ≥ËÅîÊµèËßàÂô®')).toBeInTheDocument();
  });

  test('shows local Chrome configuration when LocalCustom is selected', async () => {
    const { getAdsPowerStatus } = require('../../api/browser-api');
    getAdsPowerStatus.mockResolvedValue({
      available: false,
      message: 'AdsPower not available',
      browsers: []
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.LocalCustom
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Should show local Chrome configuration panel
    expect(screen.getByText('Êú¨Âú∞ChromeÈÖçÁΩÆ')).toBeInTheDocument();
    expect(screen.getByText('ChromeÊâßË°åÊñá‰ª∂Ë∑ØÂæÑ *')).toBeInTheDocument();
    expect(screen.getByText('ChromeÂêØÂä®ÂèÇÊï∞ÔºàÂèØÈÄâÔºâ')).toBeInTheDocument();

    // Should show Chrome path input
    const chromePathInput = screen.getByTestId('chrome-path-input');
    expect(chromePathInput).toBeInTheDocument();
  });

  test('shows AdsPower configuration when AdsPower is selected', async () => {
    getAdsPowerStatus.mockResolvedValue({
      available: true,
      message: 'AdsPower is available',
      browsers: [
        {
          user_id: 'user1',
          name: 'Browser 1',
          serial_number: 'SN123',
          status: 'Active'
        }
      ]
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.AdsPower
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for AdsPower status to load
    await waitFor(() => {
      expect(screen.getByText('AdsPowerÈò≤ÂÖ≥ËÅîÊµèËßàÂô®')).toBeInTheDocument();
    });

    // Should show AdsPower configuration panel
    expect(screen.getByText('ÈÄâÊã©AdsPowerÊµèËßàÂô® *')).toBeInTheDocument();
  });

  test('validates Chrome path when LocalCustom is selected', async () => {
    validateChromePath.mockResolvedValue({
      valid: true,
      message: 'Chrome path is valid',
      path: '/usr/bin/google-chrome'
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.LocalCustom,
            chrome_path: '/usr/bin/google-chrome'
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for Chrome path validation
    await waitFor(() => {
      expect(validateChromePath).toHaveBeenCalledWith('/usr/bin/google-chrome');
    });
  });

  test('shows AdsPower status when unavailable', async () => {
    getAdsPowerStatus.mockResolvedValue({
      available: false,
      message: 'AdsPower client is not running',
      browsers: []
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.AdsPower
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for AdsPower status to load
    await waitFor(() => {
      expect(screen.getByText('AdsPower client is not running')).toBeInTheDocument();
    });

    // Should show troubleshooting tips
    expect(screen.getByText('ËØ∑Á°Æ‰øùÔºö')).toBeInTheDocument();
    expect(screen.getByText('AdsPowerÂÆ¢Êà∑Á´ØÂ∑≤ÂêØÂä®Âπ∂ÁôªÂΩï')).toBeInTheDocument();
  });

  test('opens AdsPower download link when button is clicked', async () => {
    const mockWindowOpen = vi.fn();
    window.open = mockWindowOpen;

    getAdsPowerStatus.mockResolvedValue({
      available: false,
      message: 'AdsPower client is not running',
      browsers: []
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.AdsPower
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for AdsPower status to load
    await waitFor(() => {
      expect(screen.getByText('‰∏ãËΩΩAdsPower')).toBeInTheDocument();
    });

    const downloadButton = screen.getByText('‰∏ãËΩΩAdsPower');
    fireEvent.click(downloadButton);

    expect(mockWindowOpen).toHaveBeenCalledWith('https://www.adspower.com/download', '_blank');
  });

  test('refreshes AdsPower status when refresh button is clicked', async () => {
    getAdsPowerStatus.mockResolvedValue({
      available: true,
      message: 'AdsPower is available',
      browsers: []
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.AdsPower
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for AdsPower status to load
    await waitFor(() => {
      expect(screen.getByText('Âà∑Êñ∞')).toBeInTheDocument();
    });

    const refreshButton = screen.getByText('Âà∑Êñ∞');
    fireEvent.click(refreshButton);

    expect(getAdsPowerStatus).toHaveBeenCalledTimes(2); // Initial load + refresh
  });

  test('handles Chrome path validation error', async () => {
    validateChromePath.mockResolvedValue({
      valid: false,
      message: 'Chrome path is invalid',
      path: null
    });

    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.LocalCustom,
            chrome_path: '/invalid/path'
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Wait for Chrome path validation
    await waitFor(() => {
      expect(validateChromePath).toHaveBeenCalledWith('/invalid/path');
    });

    // Should show invalid path indicator
    expect(screen.getByText('Ë∑ØÂæÑÊó†Êïà')).toBeInTheDocument();
  });

  test('displays correct common Chrome paths for different OS', () => {
    const TestComponent = () => {
      const methods = useForm({
        defaultValues: {
          browser_config: {
            type: BrowserType.LocalCustom
          }
        }
      });

      return (
        <FormProvider {...methods}>
          <BrowserSelector control={methods.control} />
        </FormProvider>
      );
    };

    render(<TestComponent />, { wrapper: createWrapper() });

    // Should show common Chrome paths
    expect(screen.getByText('Â∏∏ËßÅË∑ØÂæÑÂèÇËÄÉÔºö')).toBeInTheDocument();
    expect(screen.getByText('Windows:')).toBeInTheDocument();
    expect(screen.getByText('macOS:')).toBeInTheDocument();
    expect(screen.getByText('Linux:')).toBeInTheDocument();
  });
});